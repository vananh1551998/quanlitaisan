//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyTaiSan_UserManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuanLyTaiSanCtyEntities : DbContext
    {
        public QuanLyTaiSanCtyEntities()
            : base("name=QuanLyTaiSanCtyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DestructivelDevice> DestructivelDevices { get; set; }
        public virtual DbSet<DestructiveType> DestructiveTypes { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceOfProject> DeviceOfProjects { get; set; }
        public virtual DbSet<DeviceType> DeviceTypes { get; set; }
        public virtual DbSet<ProjectDKC> ProjectDKCs { get; set; }
        public virtual DbSet<RepairDetail> RepairDetails { get; set; }
        public virtual DbSet<RepairType> RepairTypes { get; set; }
        public virtual DbSet<RequestDevice> RequestDevices { get; set; }
        public virtual DbSet<ScheduleTest> ScheduleTests { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsageDevice> UsageDevices { get; set; }
        public virtual DbSet<DeviceDevice> DeviceDevices { get; set; }
        public virtual DbSet<DeviceTypeComponantType> DeviceTypeComponantTypes { get; set; }
        public virtual DbSet<Credential> Credentials { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
    
        public virtual int AddDevice(string deviceCode, string newCode, string deviceName, Nullable<int> typeOfDevice, Nullable<int> parentId, string configuration, Nullable<double> price, string purchaseContract, Nullable<System.DateTime> dateOfPurchase, Nullable<int> supplierId, Nullable<int> projectId, Nullable<System.DateTime> guarantee, string notes, Nullable<int> userId, Nullable<int> status)
        {
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var newCodeParameter = newCode != null ?
                new ObjectParameter("NewCode", newCode) :
                new ObjectParameter("NewCode", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var typeOfDeviceParameter = typeOfDevice.HasValue ?
                new ObjectParameter("TypeOfDevice", typeOfDevice) :
                new ObjectParameter("TypeOfDevice", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var configurationParameter = configuration != null ?
                new ObjectParameter("Configuration", configuration) :
                new ObjectParameter("Configuration", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var purchaseContractParameter = purchaseContract != null ?
                new ObjectParameter("PurchaseContract", purchaseContract) :
                new ObjectParameter("PurchaseContract", typeof(string));
    
            var dateOfPurchaseParameter = dateOfPurchase.HasValue ?
                new ObjectParameter("DateOfPurchase", dateOfPurchase) :
                new ObjectParameter("DateOfPurchase", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var guaranteeParameter = guarantee.HasValue ?
                new ObjectParameter("Guarantee", guarantee) :
                new ObjectParameter("Guarantee", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDevice", deviceCodeParameter, newCodeParameter, deviceNameParameter, typeOfDeviceParameter, parentIdParameter, configurationParameter, priceParameter, purchaseContractParameter, dateOfPurchaseParameter, supplierIdParameter, projectIdParameter, guaranteeParameter, notesParameter, userIdParameter, statusParameter);
        }
    
        public virtual int AddDeviceOfProject(Nullable<int> projectId, Nullable<int> deviceId, string notes)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviceOfProject", projectIdParameter, deviceIdParameter, notesParameter);
        }
    
        public virtual int AddDeviceType(string typeName, string typeSymbol, string notes)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var typeSymbolParameter = typeSymbol != null ?
                new ObjectParameter("TypeSymbol", typeSymbol) :
                new ObjectParameter("TypeSymbol", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviceType", typeNameParameter, typeSymbolParameter, notesParameter);
        }
    
        public virtual int AddProject_(string projectSymbol, string projectName, Nullable<int> managerProject, string address, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> status)
        {
            var projectSymbolParameter = projectSymbol != null ?
                new ObjectParameter("ProjectSymbol", projectSymbol) :
                new ObjectParameter("ProjectSymbol", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var managerProjectParameter = managerProject.HasValue ?
                new ObjectParameter("ManagerProject", managerProject) :
                new ObjectParameter("ManagerProject", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProject_", projectSymbolParameter, projectNameParameter, managerProjectParameter, addressParameter, fromDateParameter, toDateParameter, statusParameter);
        }
    
        public virtual int AddRepairDetails(Nullable<int> deviceId, Nullable<System.DateTime> dateOfRepair, Nullable<System.DateTime> nextDateOfRepair, Nullable<int> timeOrder, Nullable<int> typeOfRepair, string addressOfRepair, Nullable<int> userId, string notes)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var dateOfRepairParameter = dateOfRepair.HasValue ?
                new ObjectParameter("DateOfRepair", dateOfRepair) :
                new ObjectParameter("DateOfRepair", typeof(System.DateTime));
    
            var nextDateOfRepairParameter = nextDateOfRepair.HasValue ?
                new ObjectParameter("NextDateOfRepair", nextDateOfRepair) :
                new ObjectParameter("NextDateOfRepair", typeof(System.DateTime));
    
            var timeOrderParameter = timeOrder.HasValue ?
                new ObjectParameter("TimeOrder", timeOrder) :
                new ObjectParameter("TimeOrder", typeof(int));
    
            var typeOfRepairParameter = typeOfRepair.HasValue ?
                new ObjectParameter("TypeOfRepair", typeOfRepair) :
                new ObjectParameter("TypeOfRepair", typeof(int));
    
            var addressOfRepairParameter = addressOfRepair != null ?
                new ObjectParameter("AddressOfRepair", addressOfRepair) :
                new ObjectParameter("AddressOfRepair", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRepairDetails", deviceIdParameter, dateOfRepairParameter, nextDateOfRepairParameter, timeOrderParameter, typeOfRepairParameter, addressOfRepairParameter, userIdParameter, notesParameter);
        }
    
        public virtual int AddRepairType(string typeName, string notes)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRepairType", typeNameParameter, notesParameter);
        }
    
        public virtual int AddRequestDevice(Nullable<int> userRequest, Nullable<System.DateTime> dateOfRequest, Nullable<System.DateTime> dateOfUse, string deviceName, Nullable<int> typeOfDevice, string configuration, string notes, Nullable<int> status, Nullable<int> numDevice, Nullable<int> userApproved)
        {
            var userRequestParameter = userRequest.HasValue ?
                new ObjectParameter("UserRequest", userRequest) :
                new ObjectParameter("UserRequest", typeof(int));
    
            var dateOfRequestParameter = dateOfRequest.HasValue ?
                new ObjectParameter("DateOfRequest", dateOfRequest) :
                new ObjectParameter("DateOfRequest", typeof(System.DateTime));
    
            var dateOfUseParameter = dateOfUse.HasValue ?
                new ObjectParameter("DateOfUse", dateOfUse) :
                new ObjectParameter("DateOfUse", typeof(System.DateTime));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var typeOfDeviceParameter = typeOfDevice.HasValue ?
                new ObjectParameter("TypeOfDevice", typeOfDevice) :
                new ObjectParameter("TypeOfDevice", typeof(int));
    
            var configurationParameter = configuration != null ?
                new ObjectParameter("Configuration", configuration) :
                new ObjectParameter("Configuration", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var numDeviceParameter = numDevice.HasValue ?
                new ObjectParameter("NumDevice", numDevice) :
                new ObjectParameter("NumDevice", typeof(int));
    
            var userApprovedParameter = userApproved.HasValue ?
                new ObjectParameter("UserApproved", userApproved) :
                new ObjectParameter("UserApproved", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRequestDevice", userRequestParameter, dateOfRequestParameter, dateOfUseParameter, deviceNameParameter, typeOfDeviceParameter, configurationParameter, notesParameter, statusParameter, numDeviceParameter, userApprovedParameter);
        }
    
        public virtual int AddRole(string roleName, string notes)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRole", roleNameParameter, notesParameter);
        }
    
        public virtual int AddScheduleTest(Nullable<int> deviceId, Nullable<System.DateTime> dateOfTest, Nullable<System.DateTime> nextDateOfTest, string categoryTest, Nullable<int> userTest, string notes)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var dateOfTestParameter = dateOfTest.HasValue ?
                new ObjectParameter("DateOfTest", dateOfTest) :
                new ObjectParameter("DateOfTest", typeof(System.DateTime));
    
            var nextDateOfTestParameter = nextDateOfTest.HasValue ?
                new ObjectParameter("NextDateOfTest", nextDateOfTest) :
                new ObjectParameter("NextDateOfTest", typeof(System.DateTime));
    
            var categoryTestParameter = categoryTest != null ?
                new ObjectParameter("CategoryTest", categoryTest) :
                new ObjectParameter("CategoryTest", typeof(string));
    
            var userTestParameter = userTest.HasValue ?
                new ObjectParameter("UserTest", userTest) :
                new ObjectParameter("UserTest", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddScheduleTest", deviceIdParameter, dateOfTestParameter, nextDateOfTestParameter, categoryTestParameter, userTestParameter, notesParameter);
        }
    
        public virtual int AddSupplier(string name, string email, string phone, string address, string support)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var supportParameter = support != null ?
                new ObjectParameter("Support", support) :
                new ObjectParameter("Support", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSupplier", nameParameter, emailParameter, phoneParameter, addressParameter, supportParameter);
        }
    
        public virtual int AddUser(string userName, string passWord, string fullName, string email, string phoneNumber, string address, string department, string position, Nullable<int> roleId, Nullable<int> status)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", userNameParameter, passWordParameter, fullNameParameter, emailParameter, phoneNumberParameter, addressParameter, departmentParameter, positionParameter, roleIdParameter, statusParameter);
        }
    
        public virtual int DeleteDevice(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDevice", idParameter);
        }
    
        public virtual int DeleteDeviceOfProject(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDeviceOfProject", idParameter);
        }
    
        public virtual int DeleteDeviceType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDeviceType", idParameter);
        }
    
        public virtual int DeleteProject(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProject", idParameter);
        }
    
        public virtual int DeleteRepairDetails(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRepairDetails", idParameter);
        }
    
        public virtual int DeleteRepairType(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRepairType", idParameter);
        }
    
        public virtual int DeleteRequestDevice(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRequestDevice", idParameter);
        }
    
        public virtual int DeleteRole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole", idParameter);
        }
    
        public virtual int DeleteScheduleTest(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteScheduleTest", idParameter);
        }
    
        public virtual int DeleteSupplier(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSupplier", idParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", idParameter);
        }
    
        public virtual ObjectResult<DeviceById_Result> DeviceById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeviceById_Result>("DeviceById", idParameter);
        }
    
        public virtual ObjectResult<DeviceTypeById_Result> DeviceTypeById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeviceTypeById_Result>("DeviceTypeById", idParameter);
        }
    
        public virtual int EditRepairDetails(Nullable<int> id, Nullable<int> deviceId, Nullable<System.DateTime> dateOfRepair, Nullable<System.DateTime> nextDateOfRepair, Nullable<int> timeOrder, Nullable<int> typeOfRepair, string addressOfRepair, Nullable<int> userId, string notes, Nullable<int> status, Nullable<double> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var dateOfRepairParameter = dateOfRepair.HasValue ?
                new ObjectParameter("DateOfRepair", dateOfRepair) :
                new ObjectParameter("DateOfRepair", typeof(System.DateTime));
    
            var nextDateOfRepairParameter = nextDateOfRepair.HasValue ?
                new ObjectParameter("NextDateOfRepair", nextDateOfRepair) :
                new ObjectParameter("NextDateOfRepair", typeof(System.DateTime));
    
            var timeOrderParameter = timeOrder.HasValue ?
                new ObjectParameter("TimeOrder", timeOrder) :
                new ObjectParameter("TimeOrder", typeof(int));
    
            var typeOfRepairParameter = typeOfRepair.HasValue ?
                new ObjectParameter("TypeOfRepair", typeOfRepair) :
                new ObjectParameter("TypeOfRepair", typeof(int));
    
            var addressOfRepairParameter = addressOfRepair != null ?
                new ObjectParameter("AddressOfRepair", addressOfRepair) :
                new ObjectParameter("AddressOfRepair", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditRepairDetails", idParameter, deviceIdParameter, dateOfRepairParameter, nextDateOfRepairParameter, timeOrderParameter, typeOfRepairParameter, addressOfRepairParameter, userIdParameter, notesParameter, statusParameter, priceParameter);
        }
    
        public virtual int EditRepairType(Nullable<int> id, string typeName, string notes)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditRepairType", idParameter, typeNameParameter, notesParameter);
        }
    
        public virtual ObjectResult<ProjectById_Result> ProjectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectById_Result>("ProjectById", idParameter);
        }
    
        public virtual ObjectResult<RoleById_Result> RoleById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleById_Result>("RoleById", idParameter);
        }
    
        public virtual int SeachDeviceOfProject(Nullable<int> devicetypes, Nullable<int> status)
        {
            var devicetypesParameter = devicetypes.HasValue ?
                new ObjectParameter("devicetypes", devicetypes) :
                new ObjectParameter("devicetypes", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SeachDeviceOfProject", devicetypesParameter, statusParameter);
        }
    
        public virtual ObjectResult<SearchDevice_Result> SearchDevice(Nullable<int> status, Nullable<int> devicetype, Nullable<int> guarantee, Nullable<int> projectid, string devicecode)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var devicetypeParameter = devicetype.HasValue ?
                new ObjectParameter("devicetype", devicetype) :
                new ObjectParameter("devicetype", typeof(int));
    
            var guaranteeParameter = guarantee.HasValue ?
                new ObjectParameter("guarantee", guarantee) :
                new ObjectParameter("guarantee", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var devicecodeParameter = devicecode != null ?
                new ObjectParameter("devicecode", devicecode) :
                new ObjectParameter("devicecode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDevice_Result>("SearchDevice", statusParameter, devicetypeParameter, guaranteeParameter, projectidParameter, devicecodeParameter);
        }
    
        public virtual ObjectResult<SearchDeviceType_Result> SearchDeviceType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDeviceType_Result>("SearchDeviceType");
        }
    
        public virtual ObjectResult<SearchProject_Result> SearchProject(Nullable<int> managerProject, Nullable<int> status, Nullable<int> typeProject, string projectSymbol)
        {
            var managerProjectParameter = managerProject.HasValue ?
                new ObjectParameter("managerProject", managerProject) :
                new ObjectParameter("managerProject", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var typeProjectParameter = typeProject.HasValue ?
                new ObjectParameter("TypeProject", typeProject) :
                new ObjectParameter("TypeProject", typeof(int));
    
            var projectSymbolParameter = projectSymbol != null ?
                new ObjectParameter("ProjectSymbol", projectSymbol) :
                new ObjectParameter("ProjectSymbol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProject_Result>("SearchProject", managerProjectParameter, statusParameter, typeProjectParameter, projectSymbolParameter);
        }
    
        public virtual ObjectResult<SearchRole_Result> SearchRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRole_Result>("SearchRole");
        }
    
        public virtual int SearchSupplier(Nullable<int> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchSupplier", statusParameter);
        }
    
        public virtual ObjectResult<SearchUser_Result> SearchUser(Nullable<int> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchUser_Result>("SearchUser", statusParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SupplierById_Result> SupplierById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierById_Result>("SupplierById", idParameter);
        }
    
        public virtual int UpdateDevice(Nullable<int> id, string deviceCode, string newCode, string deviceName, Nullable<int> typeOfDevice, Nullable<int> parentId, string configuration, Nullable<double> price, string purchaseContract, Nullable<System.DateTime> dateOfPurchase, Nullable<int> supplierId, Nullable<System.DateTime> guarantee, Nullable<int> userId, string notes, Nullable<System.DateTime> createdDate, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var newCodeParameter = newCode != null ?
                new ObjectParameter("NewCode", newCode) :
                new ObjectParameter("NewCode", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var typeOfDeviceParameter = typeOfDevice.HasValue ?
                new ObjectParameter("TypeOfDevice", typeOfDevice) :
                new ObjectParameter("TypeOfDevice", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var configurationParameter = configuration != null ?
                new ObjectParameter("Configuration", configuration) :
                new ObjectParameter("Configuration", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var purchaseContractParameter = purchaseContract != null ?
                new ObjectParameter("PurchaseContract", purchaseContract) :
                new ObjectParameter("PurchaseContract", typeof(string));
    
            var dateOfPurchaseParameter = dateOfPurchase.HasValue ?
                new ObjectParameter("DateOfPurchase", dateOfPurchase) :
                new ObjectParameter("DateOfPurchase", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var guaranteeParameter = guarantee.HasValue ?
                new ObjectParameter("Guarantee", guarantee) :
                new ObjectParameter("Guarantee", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDevice", idParameter, deviceCodeParameter, newCodeParameter, deviceNameParameter, typeOfDeviceParameter, parentIdParameter, configurationParameter, priceParameter, purchaseContractParameter, dateOfPurchaseParameter, supplierIdParameter, guaranteeParameter, userIdParameter, notesParameter, createdDateParameter, statusParameter);
        }
    
        public virtual int UpdateDeviceOfProject(Nullable<int> id, Nullable<int> projectId, Nullable<int> deviceId, Nullable<System.DateTime> dateOfDelivery, Nullable<System.DateTime> dateOfReturn, Nullable<int> status, string notes, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var dateOfDeliveryParameter = dateOfDelivery.HasValue ?
                new ObjectParameter("DateOfDelivery", dateOfDelivery) :
                new ObjectParameter("DateOfDelivery", typeof(System.DateTime));
    
            var dateOfReturnParameter = dateOfReturn.HasValue ?
                new ObjectParameter("DateOfReturn", dateOfReturn) :
                new ObjectParameter("DateOfReturn", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviceOfProject", idParameter, projectIdParameter, deviceIdParameter, dateOfDeliveryParameter, dateOfReturnParameter, statusParameter, notesParameter, isDeletedParameter);
        }
    
        public virtual int UpdateDeviceType(Nullable<int> id, string typeName, string typeSymbol, string notes)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var typeSymbolParameter = typeSymbol != null ?
                new ObjectParameter("TypeSymbol", typeSymbol) :
                new ObjectParameter("TypeSymbol", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviceType", idParameter, typeNameParameter, typeSymbolParameter, notesParameter);
        }
    
        public virtual int UpdateProject(Nullable<int> id, string projectSymbol, string projectName, Nullable<int> managerProject, string address, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<int> status, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var projectSymbolParameter = projectSymbol != null ?
                new ObjectParameter("ProjectSymbol", projectSymbol) :
                new ObjectParameter("ProjectSymbol", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var managerProjectParameter = managerProject.HasValue ?
                new ObjectParameter("ManagerProject", managerProject) :
                new ObjectParameter("ManagerProject", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProject", idParameter, projectSymbolParameter, projectNameParameter, managerProjectParameter, addressParameter, fromDateParameter, toDateParameter, createdDateParameter, modifiedDateParameter, statusParameter, isDeletedParameter);
        }
    
        public virtual int UpdateRequestDevice(Nullable<int> id, Nullable<int> userRequest, Nullable<System.DateTime> dateOfRequest, Nullable<System.DateTime> dateOfUse, string deviceName, Nullable<int> typeOfDevice, string configuration, string notes, Nullable<bool> approved, Nullable<int> userApproved, Nullable<int> status, Nullable<int> numDevice, string noteProcess, string noteReasonRefuse, string nameUserApproved)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userRequestParameter = userRequest.HasValue ?
                new ObjectParameter("UserRequest", userRequest) :
                new ObjectParameter("UserRequest", typeof(int));
    
            var dateOfRequestParameter = dateOfRequest.HasValue ?
                new ObjectParameter("DateOfRequest", dateOfRequest) :
                new ObjectParameter("DateOfRequest", typeof(System.DateTime));
    
            var dateOfUseParameter = dateOfUse.HasValue ?
                new ObjectParameter("DateOfUse", dateOfUse) :
                new ObjectParameter("DateOfUse", typeof(System.DateTime));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var typeOfDeviceParameter = typeOfDevice.HasValue ?
                new ObjectParameter("TypeOfDevice", typeOfDevice) :
                new ObjectParameter("TypeOfDevice", typeof(int));
    
            var configurationParameter = configuration != null ?
                new ObjectParameter("Configuration", configuration) :
                new ObjectParameter("Configuration", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            var userApprovedParameter = userApproved.HasValue ?
                new ObjectParameter("UserApproved", userApproved) :
                new ObjectParameter("UserApproved", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var numDeviceParameter = numDevice.HasValue ?
                new ObjectParameter("NumDevice", numDevice) :
                new ObjectParameter("NumDevice", typeof(int));
    
            var noteProcessParameter = noteProcess != null ?
                new ObjectParameter("NoteProcess", noteProcess) :
                new ObjectParameter("NoteProcess", typeof(string));
    
            var noteReasonRefuseParameter = noteReasonRefuse != null ?
                new ObjectParameter("NoteReasonRefuse", noteReasonRefuse) :
                new ObjectParameter("NoteReasonRefuse", typeof(string));
    
            var nameUserApprovedParameter = nameUserApproved != null ?
                new ObjectParameter("NameUserApproved", nameUserApproved) :
                new ObjectParameter("NameUserApproved", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRequestDevice", idParameter, userRequestParameter, dateOfRequestParameter, dateOfUseParameter, deviceNameParameter, typeOfDeviceParameter, configurationParameter, notesParameter, approvedParameter, userApprovedParameter, statusParameter, numDeviceParameter, noteProcessParameter, noteReasonRefuseParameter, nameUserApprovedParameter);
        }
    
        public virtual int UpdateRole(Nullable<int> id, string roleName, string notes)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRole", idParameter, roleNameParameter, notesParameter);
        }
    
        public virtual int UpdateScheduleTest(Nullable<int> id, Nullable<int> deviceId, Nullable<System.DateTime> dateOfTest, Nullable<System.DateTime> nextDateOfTest, string categoryTest, Nullable<int> userTest, string notes, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var dateOfTestParameter = dateOfTest.HasValue ?
                new ObjectParameter("DateOfTest", dateOfTest) :
                new ObjectParameter("DateOfTest", typeof(System.DateTime));
    
            var nextDateOfTestParameter = nextDateOfTest.HasValue ?
                new ObjectParameter("NextDateOfTest", nextDateOfTest) :
                new ObjectParameter("NextDateOfTest", typeof(System.DateTime));
    
            var categoryTestParameter = categoryTest != null ?
                new ObjectParameter("CategoryTest", categoryTest) :
                new ObjectParameter("CategoryTest", typeof(string));
    
            var userTestParameter = userTest.HasValue ?
                new ObjectParameter("UserTest", userTest) :
                new ObjectParameter("UserTest", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScheduleTest", idParameter, deviceIdParameter, dateOfTestParameter, nextDateOfTestParameter, categoryTestParameter, userTestParameter, notesParameter, statusParameter);
        }
    
        public virtual int UpdateSupplier(Nullable<int> id, string name, string email, string phone, string address, string support, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var supportParameter = support != null ?
                new ObjectParameter("Support", support) :
                new ObjectParameter("Support", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplier", idParameter, nameParameter, emailParameter, phoneParameter, addressParameter, supportParameter, statusParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> id, string userName, string passWord, string fullName, string email, string phoneNumber, string address, string department, string position, Nullable<int> roleId, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", idParameter, userNameParameter, passWordParameter, fullNameParameter, emailParameter, phoneNumberParameter, addressParameter, departmentParameter, positionParameter, roleIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<UserById_Result> UserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserById_Result>("UserById", idParameter);
        }
    
        public virtual int DeleteDevice1(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDevice1", idParameter);
        }
    
        public virtual ObjectResult<SelectList_Result> SelectList(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectList_Result>("SelectList", idParameter);
        }
    
        public virtual int DeleteProject1(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProject1", idParameter);
        }
    
        public virtual ObjectResult<DeviceOfProjectAll_Result> DeviceOfProjectAll(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeviceOfProjectAll_Result>("DeviceOfProjectAll", projectIdParameter);
        }
    
        [DbFunction("QuanLyTaiSanCtyEntities", "splitstring")]
        public virtual IQueryable<string> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[QuanLyTaiSanCtyEntities].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        public virtual int ReturnDeviceOfProject(Nullable<int> projectId, Nullable<int> deviceId, string notes)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnDeviceOfProject", projectIdParameter, deviceIdParameter, notesParameter);
        }
    
        public virtual ObjectResult<SearchRepairDetails_Result> SearchRepairDetails(Nullable<int> repairtypes, Nullable<int> user, Nullable<int> iddevice, Nullable<int> status)
        {
            var repairtypesParameter = repairtypes.HasValue ?
                new ObjectParameter("repairtypes", repairtypes) :
                new ObjectParameter("repairtypes", typeof(int));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(int));
    
            var iddeviceParameter = iddevice.HasValue ?
                new ObjectParameter("iddevice", iddevice) :
                new ObjectParameter("iddevice", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRepairDetails_Result>("SearchRepairDetails", repairtypesParameter, userParameter, iddeviceParameter, statusParameter);
        }
    
        public virtual ObjectResult<RepairDetailsById_Result> RepairDetailsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepairDetailsById_Result>("RepairDetailsById", idParameter);
        }
    
        public virtual int LiquidationDevice(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LiquidationDevice", idParameter);
        }
    
        public virtual ObjectResult<RepairDetailsAll_Result> RepairDetailsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepairDetailsAll_Result>("RepairDetailsAll");
        }
    
        public virtual int SearchRequestDevice(Nullable<int> status, Nullable<bool> approved)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchRequestDevice", statusParameter, approvedParameter);
        }
    
        public virtual ObjectResult<SearchScheduleTest_Result> SearchScheduleTest(Nullable<int> user, Nullable<int> status)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchScheduleTest_Result>("SearchScheduleTest", userParameter, statusParameter);
        }
    
        public virtual ObjectResult<ScheduleTestById_Result> ScheduleTestById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScheduleTestById_Result>("ScheduleTestById", idParameter);
        }
    
        public virtual ObjectResult<HistoryScheduleTestById_Result> HistoryScheduleTestById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HistoryScheduleTestById_Result>("HistoryScheduleTestById", idParameter);
        }
    
        public virtual ObjectResult<HistoryRepairDetails_Result> HistoryRepairDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HistoryRepairDetails_Result>("HistoryRepairDetails", idParameter);
        }
    
        public virtual ObjectResult<SearchRequestDeviceNew_Result> SearchRequestDeviceNew(Nullable<int> status, Nullable<bool> approved)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRequestDeviceNew_Result>("SearchRequestDeviceNew", statusParameter, approvedParameter);
        }
    
        public virtual ObjectResult<SearchUseDevice_Result> SearchUseDevice(Nullable<int> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchUseDevice_Result>("SearchUseDevice", deviceIdParameter);
        }
    
        public virtual int SearchRequestDevice1(Nullable<int> status, Nullable<bool> approved)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchRequestDevice1", statusParameter, approvedParameter);
        }
    
        public virtual ObjectResult<SearchRepairDevice_Result> SearchRepairDevice(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRepairDevice_Result>("SearchRepairDevice", idParameter);
        }
    
        public virtual int DeleteRepairDetailsOne(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRepairDetailsOne", idParameter);
        }
    
        public virtual int ReturnDeviceProject(Nullable<int> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnDeviceProject", deviceIdParameter);
        }
    
        public virtual ObjectResult<OderCode> OderCode(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OderCode>("OderCode", idParameter);
        }
    
        public virtual ObjectResult<StatisticalDevice_Result> StatisticalDevice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatisticalDevice_Result>("StatisticalDevice");
        }
    
        public virtual ObjectResult<StatisticProject_Result> StatisticProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatisticProject_Result>("StatisticProject");
        }
    
        public virtual ObjectResult<DeviceHistory_Result> DeviceHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeviceHistory_Result>("DeviceHistory");
        }
    
        public virtual ObjectResult<ChildrenOfDevice_Result> ChildrenOfDevice(Nullable<int> deviceCodeParents, Nullable<int> typeSymbolChildren)
        {
            var deviceCodeParentsParameter = deviceCodeParents.HasValue ?
                new ObjectParameter("DeviceCodeParents", deviceCodeParents) :
                new ObjectParameter("DeviceCodeParents", typeof(int));
    
            var typeSymbolChildrenParameter = typeSymbolChildren.HasValue ?
                new ObjectParameter("TypeSymbolChildren", typeSymbolChildren) :
                new ObjectParameter("TypeSymbolChildren", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChildrenOfDevice_Result>("ChildrenOfDevice", deviceCodeParentsParameter, typeSymbolChildrenParameter);
        }
    
        public virtual ObjectResult<TypeComponantOfDevice_Result> TypeComponantOfDevice(Nullable<int> typeParent)
        {
            var typeParentParameter = typeParent.HasValue ?
                new ObjectParameter("TypeParent", typeParent) :
                new ObjectParameter("TypeParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TypeComponantOfDevice_Result>("TypeComponantOfDevice", typeParentParameter);
        }
    
        public virtual int AddTypeChidren(Nullable<int> typeChidren, Nullable<int> typeParent, Nullable<int> type_TypeCom)
        {
            var typeChidrenParameter = typeChidren.HasValue ?
                new ObjectParameter("TypeChidren", typeChidren) :
                new ObjectParameter("TypeChidren", typeof(int));
    
            var typeParentParameter = typeParent.HasValue ?
                new ObjectParameter("TypeParent", typeParent) :
                new ObjectParameter("TypeParent", typeof(int));
    
            var type_TypeComParameter = type_TypeCom.HasValue ?
                new ObjectParameter("Type_TypeCom", type_TypeCom) :
                new ObjectParameter("Type_TypeCom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTypeChidren", typeChidrenParameter, typeParentParameter, type_TypeComParameter);
        }
    
        public virtual int AddDeviceOfDevice(Nullable<int> idParent, Nullable<int> idChild, Nullable<int> typeChild, Nullable<int> typeParent, Nullable<int> typeComponant)
        {
            var idParentParameter = idParent.HasValue ?
                new ObjectParameter("IdParent", idParent) :
                new ObjectParameter("IdParent", typeof(int));
    
            var idChildParameter = idChild.HasValue ?
                new ObjectParameter("IdChild", idChild) :
                new ObjectParameter("IdChild", typeof(int));
    
            var typeChildParameter = typeChild.HasValue ?
                new ObjectParameter("TypeChild", typeChild) :
                new ObjectParameter("TypeChild", typeof(int));
    
            var typeParentParameter = typeParent.HasValue ?
                new ObjectParameter("TypeParent", typeParent) :
                new ObjectParameter("TypeParent", typeof(int));
    
            var typeComponantParameter = typeComponant.HasValue ?
                new ObjectParameter("TypeComponant", typeComponant) :
                new ObjectParameter("TypeComponant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviceOfDevice", idParentParameter, idChildParameter, typeChildParameter, typeParentParameter, typeComponantParameter);
        }
    
        public virtual int DeleteDeviceOfDevice(Nullable<int> idParent, Nullable<int> idChild, string resons)
        {
            var idParentParameter = idParent.HasValue ?
                new ObjectParameter("IdParent", idParent) :
                new ObjectParameter("IdParent", typeof(int));
    
            var idChildParameter = idChild.HasValue ?
                new ObjectParameter("IdChild", idChild) :
                new ObjectParameter("IdChild", typeof(int));
    
            var resonsParameter = resons != null ?
                new ObjectParameter("Resons", resons) :
                new ObjectParameter("Resons", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDeviceOfDevice", idParentParameter, idChildParameter, resonsParameter);
        }
    
        public virtual int DeleteAllRole(string groupId)
        {
            var groupIdParameter = groupId != null ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllRole", groupIdParameter);
        }
    
        public virtual int UpdateUserDevice(Nullable<int> idDv, Nullable<int> idUser)
        {
            var idDvParameter = idDv.HasValue ?
                new ObjectParameter("IdDv", idDv) :
                new ObjectParameter("IdDv", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserDevice", idDvParameter, idUserParameter);
        }
    
        public virtual int DeleteTypeParentTypeChild(Nullable<int> typeChidren, Nullable<int> typeParent)
        {
            var typeChidrenParameter = typeChidren.HasValue ?
                new ObjectParameter("TypeChidren", typeChidren) :
                new ObjectParameter("TypeChidren", typeof(int));
    
            var typeParentParameter = typeParent.HasValue ?
                new ObjectParameter("TypeParent", typeParent) :
                new ObjectParameter("TypeParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTypeParentTypeChild", typeChidrenParameter, typeParentParameter);
        }
    }
}
